0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\yurin_000\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\YURIN_~1\\AppData\\Local\\Temp\\npm-7484-vKw8u0Em\\1403501386834-0.1141152186319232\\tmp.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
13 verbose folder .
14 info prepublish bauer-sql@1.0.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\yurin_000\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
18 verbose lock tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz C:\Users\yurin_000\AppData\Roaming\npm-cache\ae686674-86834-0-1141152186319232-tmp-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
22 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
23 verbose tar unpack C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
24 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
25 verbose lock tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package C:\Users\yurin_000\AppData\Roaming\npm-cache\56d967b8-86834-0-1141152186319232-package.lock
26 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
27 verbose lock tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz C:\Users\yurin_000\AppData\Roaming\npm-cache\ae686674-86834-0-1141152186319232-tmp-tgz.lock
28 silly gunzTarPerm modes [ '755', '644' ]
29 silly gunzTarPerm extractEntry package.json
30 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
31 silly gunzTarPerm extractEntry .npmignore
32 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
33 silly gunzTarPerm extractEntry README.md
34 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
35 silly gunzTarPerm extractEntry LICENSE
36 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
37 silly gunzTarPerm extractEntry sql.js
38 silly gunzTarPerm modified mode [ 'sql.js', 438, 420 ]
39 silly gunzTarPerm extractEntry test/test-alter.js
40 silly gunzTarPerm modified mode [ 'test/test-alter.js', 438, 420 ]
41 silly gunzTarPerm extractEntry test/test-create.js
42 silly gunzTarPerm modified mode [ 'test/test-create.js', 438, 420 ]
43 silly gunzTarPerm extractEntry test/test-delete.js
44 silly gunzTarPerm modified mode [ 'test/test-delete.js', 438, 420 ]
45 silly gunzTarPerm extractEntry test/test-drop.js
46 silly gunzTarPerm modified mode [ 'test/test-drop.js', 438, 420 ]
47 silly gunzTarPerm extractEntry test/test-insert.js
48 silly gunzTarPerm modified mode [ 'test/test-insert.js', 438, 420 ]
49 silly gunzTarPerm extractEntry test/test-select.js
50 silly gunzTarPerm modified mode [ 'test/test-select.js', 438, 420 ]
51 silly gunzTarPerm extractEntry test/test-update.js
52 silly gunzTarPerm modified mode [ 'test/test-update.js', 438, 420 ]
53 silly gunzTarPerm extractEntry test/test.js
54 silly gunzTarPerm modified mode [ 'test/test.js', 438, 420 ]
55 silly gunzTarPerm extractEntry test/mocha.opts
56 silly gunzTarPerm modified mode [ 'test/mocha.opts', 438, 420 ]
57 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
58 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
59 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
60 silly lockFile ae686674-86834-0-1141152186319232-tmp-tgz tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\tmp.tgz
61 verbose tar pack [ 'C:\\Users\\yurin_000\\AppData\\Roaming\\npm-cache\\bauer-sql\\1.0.0\\package.tgz',
61 verbose tar pack   'C:\\Users\\YURIN_~1\\AppData\\Local\\Temp\\npm-7484-vKw8u0Em\\1403501386834-0.1141152186319232\\package' ]
62 verbose tarball C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
63 verbose folder C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
64 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
65 verbose lock tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package C:\Users\yurin_000\AppData\Roaming\npm-cache\56d967b8-86834-0-1141152186319232-package.lock
66 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
67 verbose lock tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz C:\Users\yurin_000\AppData\Roaming\npm-cache\eaf3288a-ache-bauer-sql-1-0-0-package-tgz.lock
68 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
69 silly lockFile 56d967b8-86834-0-1141152186319232-package tar://C:\Users\YURIN_~1\AppData\Local\Temp\npm-7484-vKw8u0Em\1403501386834-0.1141152186319232\package
70 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
71 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
72 silly lockFile 9270fc16-pm-cache-bauer-sql-1-0-0-package C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
73 verbose lock C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package C:\Users\yurin_000\AppData\Roaming\npm-cache\9270fc16-pm-cache-bauer-sql-1-0-0-package.lock
74 silly lockFile 9270fc16-pm-cache-bauer-sql-1-0-0-package C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
75 silly lockFile 9270fc16-pm-cache-bauer-sql-1-0-0-package C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
76 verbose tar unpack C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
77 silly lockFile babcf28e-pm-cache-bauer-sql-1-0-0-package tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
78 verbose lock tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package C:\Users\yurin_000\AppData\Roaming\npm-cache\babcf28e-pm-cache-bauer-sql-1-0-0-package.lock
79 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
80 verbose lock tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz C:\Users\yurin_000\AppData\Roaming\npm-cache\eaf3288a-ache-bauer-sql-1-0-0-package-tgz.lock
81 silly gunzTarPerm modes [ '755', '644' ]
82 silly gunzTarPerm extractEntry package.json
83 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
84 silly gunzTarPerm extractEntry .npmignore
85 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
86 silly gunzTarPerm extractEntry README.md
87 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
88 silly gunzTarPerm extractEntry LICENSE
89 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
90 silly gunzTarPerm extractEntry sql.js
91 silly gunzTarPerm modified mode [ 'sql.js', 438, 420 ]
92 silly gunzTarPerm extractEntry test/test-alter.js
93 silly gunzTarPerm modified mode [ 'test/test-alter.js', 438, 420 ]
94 silly gunzTarPerm extractEntry test/test-create.js
95 silly gunzTarPerm modified mode [ 'test/test-create.js', 438, 420 ]
96 silly gunzTarPerm extractEntry test/test-delete.js
97 silly gunzTarPerm modified mode [ 'test/test-delete.js', 438, 420 ]
98 silly gunzTarPerm extractEntry test/test-drop.js
99 silly gunzTarPerm modified mode [ 'test/test-drop.js', 438, 420 ]
100 silly gunzTarPerm extractEntry test/test-insert.js
101 silly gunzTarPerm modified mode [ 'test/test-insert.js', 438, 420 ]
102 silly gunzTarPerm extractEntry test/test-select.js
103 silly gunzTarPerm modified mode [ 'test/test-select.js', 438, 420 ]
104 silly gunzTarPerm extractEntry test/test-update.js
105 silly gunzTarPerm modified mode [ 'test/test-update.js', 438, 420 ]
106 silly gunzTarPerm extractEntry test/test.js
107 silly gunzTarPerm modified mode [ 'test/test.js', 438, 420 ]
108 silly gunzTarPerm extractEntry test/mocha.opts
109 silly gunzTarPerm modified mode [ 'test/mocha.opts', 438, 420 ]
110 silly lockFile babcf28e-pm-cache-bauer-sql-1-0-0-package tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
111 silly lockFile babcf28e-pm-cache-bauer-sql-1-0-0-package tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package
112 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
113 silly lockFile eaf3288a-ache-bauer-sql-1-0-0-package-tgz tar://C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
114 verbose chmod C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz 644
115 silly chown skipping for windows C:\Users\yurin_000\AppData\Roaming\npm-cache\bauer-sql\1.0.0\package.tgz
116 silly lockFile 3a52ce78- .
117 silly lockFile 3a52ce78- .
118 silly publish { name: 'bauer-sql',
118 silly publish   version: '1.0.0',
118 silly publish   description: 'Just another SQL building tool',
118 silly publish   keywords:
118 silly publish    [ 'sql',
118 silly publish      'query',
118 silly publish      'insert',
118 silly publish      'delete',
118 silly publish      'update',
118 silly publish      'create',
118 silly publish      'alter',
118 silly publish      'drop',
118 silly publish      'table',
118 silly publish      'index',
118 silly publish      'trigger',
118 silly publish      'statement' ],
118 silly publish   license: 'MIT',
118 silly publish   homepage: 'https://github.com/yneves/node-bauer-sql',
118 silly publish   author:
118 silly publish    { name: 'Yuri Neves Silveira',
118 silly publish      email: 'npm@yneves.com',
118 silly publish      url: 'http://yneves.com/' },
118 silly publish   repository:
118 silly publish    { type: 'git',
118 silly publish      url: 'https://github.com/yneves/node-bauer-sql.git' },
118 silly publish   scripts: { test: 'mocha' },
118 silly publish   devDependencies: { mocha: '>=1.0.0' },
118 silly publish   dependencies: { 'bauer-factory': '>=1.0.0' },
118 silly publish   main: 'sql.js',
118 silly publish   readme: 'node-bauer-sql\r\n==============\r\n\r\nJust another SQL building tool. \r\n\r\nIt was inspired by [Squel.js](http://hiddentao.github.io/squel/index.html), which i used for some time and is a great library.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install bauer-sql\r\n```\r\n\r\n## Usage\r\n\r\nThe module provides the most common statements (SELECT, INSERT, DELETE, UPDATE, CREATE, ALTER, DROP). It was built to be used with `sqlite3` and works perfectly on it. Although it should work with other SQL dialects, since it covers common syntax. Unit tests covers only query building, not it\'s execution.\r\n\r\n```js\r\nvar sql = require("bauer-sql");\r\n```\r\n\r\n## Query\r\n\r\nThe `sql.cls.Query` class is inherited by all other classes. Extending its prototype will make it available for all other kinds of statements.\r\n\r\n```js\r\nsql.cls.Query.prototype.execute = function() {\r\n\tvar query = this.toQuery();\r\n\tsqlite3.run(query.text,query.args,function() {\r\n\t});\r\n}\r\n```\r\n\r\n### .toQuery\r\n\r\nBuilds the query and returns an object with `text` and `args` properties, so you can give it to your favorite executing library.\r\n\r\n```js\r\nvar query = queryObj.toQuery();\r\nvar text = query.text; // String\r\nvar args = query.args; // Array\r\n```\r\n\r\n### .toText\r\n\r\nBuilds the query by calling `.toQuery` and then replaces all `?` tokens with corresponding arguments. \r\n\r\n```js\r\nvar text = queryObj.toText();\r\n```\r\n\r\nIt accepts a callback which can be used to quote values. Values aren\'t quoted by default.\r\n\r\n```js\r\nvar text = queryObj.toText(function(val,idx) {\r\n\treturn "\'" + val + "\'";\r\n});\r\n```\r\n\r\n## Select\r\n\r\nBuilds a `SELECT` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar select = sql.select();\r\n// same as\r\nvar select = new sql.cls.Select();\r\n```\r\n\r\n### .fields\r\n\r\nSet the fields to be selected. Defaults to `*`.\r\n\r\n```js\r\nselect.fields("table.*, other.fieldname AS name")\r\n// same as\r\nselect.fields("table.*","other.fieldname AS name")\r\n// same as\r\nselect.fields("table.*").fields({ "other.fieldname": "name" });\r\n// produces SELECT table.*, other.fieldname AS name\r\n```\r\n\r\n### .from\r\n\r\nDefines the `FROM` clause.\r\n\r\n```js\r\nselect.from("table, other");\r\n// same as\r\nselect.from("table","other");\r\n// same as\r\nselect.from("table").from("other");\r\n// produces FROM table, other\r\n```\r\n\r\nIt accepts a `sql.cls.Select` instance.\r\n\r\n```js\r\nvar from = sql.select().fields("table.*").from("table").where({ field: "value" });\r\n\r\nselect.from( from ).where({ other: "value" }); \r\n// produces SELECT * FROM (SELECT other.* FROM table WHERE field = ?) WHERE other = ?\r\n```\r\n\r\n### .where\r\n\r\nDefines the `WHERE` clause.  \r\n\r\n```js\r\nselect.where({ one: 1, two: 2 })\r\n// produces WHERE (one = ? AND two = ?)\r\n```\r\n\r\n```js\r\nselect.where({ one: 1 }).where({ two: 2 })\r\n// produces WHERE (one = ?) AND (two = ?)\r\n```\r\n\r\nA little more complex filtering.\r\n\r\n```js\r\nselect.where({ one: { gt: 0, elt: 1 }, two: [2,3,4] })\r\n// produces WHERE (one > ? AND one <= ? AND two IN (?, ?, ?))\r\n```\r\n\r\n```js\r\nselect.where({ one: { gt: 0, elt: 1 } }).where({ two: [2,3,4] })\r\n// produces WHERE (one > ? AND one <= ?) AND (two IN (?, ?, ?))\r\n```\r\n\r\nAll entries are combined with `AND` operator. To use `OR` call it passing a `String`. In this case the query arguments won\'t be handled.\r\n\r\n```js\r\nselect.where("one = 1 OR one = 2","two = 3 OR two = 4");\r\n// same as\r\nselect.where("one = 1 OR one = 2").where("two = 3 OR two = 4");\r\n// produces WHERE (one = 1 OR one = 2) AND (two = 3 OR two = 4)\r\n```\r\n\r\n### .group\r\n\r\nDefines the `GROUP BY` clause.\r\n\r\n```js\r\nselect.group("one, two")\r\n// same as\r\nselect.group("one","two")\r\n// same as\r\nselect.group("one").group("two")\r\n// produces GROUP BY one, two\r\n```\r\n\r\n### .order\r\n\r\nDefines the `ORDER BY` clause.\r\n\r\n```js\r\nselect.order("one, two DESC")\r\n// same as\r\nselect.order("one","two DESC")\r\n// same as\r\nselect.group("one").group("two DESC")\r\n// produces ORDER BY one, two DESC\r\n```\r\n\r\n### .limit\r\n\r\nDefines the `LIMIT` clause.\r\n\r\n```js\r\nselect.limit("10, 20")\r\n// same as\r\nselect.limit(10,20)\r\n// same as\r\nselect.limit(10).limit(20)\r\n// produces LIMIT 10, 20\r\n```\r\n\r\n### Joins\r\n\r\nIncludes join operations at the `FROM` clause. Currently `JOIN`, `INNER JOIN`, `LEFT JOIN`, `LEFT OUTER JOIN` and `CROSS JOIN` are available as they are the ones supported by `sqlite3`. It\'s simple to add or remove operators by modifying the `JOINS` array at the beginning of `sql.js` file.\r\n\r\n```js\r\nselect.join({ "joinedtable": "joinedtable.id = fromtable.id" })\r\n// produces JOIN joinedtable ON (joinedtable.id = fromtable.id)\r\n```\r\n\r\n```js\r\nselect.innertJoin({ "joinedtable": "joinedtable.id = fromtable.id" })\r\n// produces INNER JOIN joinedtable ON (joinedtable.id = fromtable.id)\r\n```\r\n\r\n```js\r\nselect.leftJoin({ "joinedtable": "joinedtable.id = fromtable.id" })\r\n// produces LEFT JOIN joinedtable ON (joinedtable.id = fromtable.id)\r\n```\r\n\r\n```js\r\nselect.leftOuterJoin({ "joinedtable": "joinedtable.id = fromtable.id" })\r\n// produces LEFT OUTER JOIN joinedtable ON (joinedtable.id = fromtable.id)\r\n```\r\n\r\n```js\r\nselect.crossJoin({ "joinedtable": "joinedtable.id = fromtable.id" })\r\n// produces CROSS JOIN joinedtable ON (joinedtable.id = fromtable.id)\r\n```\r\n\r\nOperations can be combined having each entry representing a join operation.\r\n\r\n```js\r\nselect\r\n  .fields({ "a.id": "a", "b.id": "b","c.id": "c","d.id": "d","e.id": "e" })\r\n  .from("a")\r\n  .join({ "b": "b.id = a.bid", "c": "c.id = a.cid" })\r\n  .leftJoin({ "d": "d.id = a.did" })\r\n  .leftOuterJoin({ "e": "e.id = a.eid" })\r\n// produces:\r\n// SELECT a.id as a, b.id as b, c.id as c, d.id as d, e.id as e\r\n// FROM a\r\n// JOIN b ON (b.id = a.bid)\r\n// JOIN c ON (c.id = a.cid)\r\n// LEFT JOIN d ON (d.id = a.did)\r\n// LEFT OUTER JOIN e ON (e.id = a.eid)\r\n```\r\n\r\n## Insert\r\n\r\nBuilds an `INSERT` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar insert = sql.insert();\r\n// same as\r\nvar insert = new sql.cls.Insert();\r\n```\r\n\r\n### .into\r\n\r\nDefines the `INTO` clause.\r\n\r\n```js\r\ninsert.into("table")\r\n// produces INSERT INTO table\r\n```\r\n\r\n### .fields\r\n\r\nDefines the columns names in the given order.\r\n\r\n```js\r\ninsert.into("table").fields("one, two, three")\r\n// same as\r\ninsert.into("table").fields("one","two","three")\r\n// same as\r\ninsert.into("table").fields("one").fields("two").fields("three")\r\n// same as\r\ninsert.into("table").fields(["one","two","three"])\r\n// produces INSERT INTO table (one, two, three)\r\n```\r\n\r\n### .values\r\n\r\nDefines the records values. Unlike other methods, each call of `.values` defines a diferent record.\r\n\r\n```js\r\ninsert.values(1,2,3)\r\n// same as\r\ninsert.values([1,2,3])\r\n//same as\r\ninsert.values(1,[2,3])\r\n// produces VALUES (?, ?, ?)\r\n```\r\n\r\nTo insert multiple records call `.values` as many times as needed.\r\n\r\n```js\r\ninsert.values(1,2,3).values(1,2,3).values(1,2,3)\r\n// produces VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?)\r\n```\r\n\r\n## Update\r\n\r\nBuilds an `UPDATE` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar update = sql.update();\r\n// same as\r\nvar update = new sql.cls.Update();\r\n```\r\n\r\n### .table\r\n\r\nDefines the table to be updated.\r\n\r\n```js\r\nupdate.table("table")\r\n// produces UPDATE table\r\n```\r\n\r\n### .set\r\n\r\nDefines the `SET` clause.\r\n\r\n```js\r\nupdate.set({ one: 1, two: 2 })\r\n// same as\r\nupdate.set({ one: 1 },{ two: 2 })\r\n// same as\r\nupdate.set({ one: 1 }).set({ two: 2 })\r\n// produces SET one = ?, two = ?\r\n```\r\n\r\n### .where\r\n\r\nWorks exactly the same as in Select statement. Please refer to its documentation.\r\n\r\n### Joins\r\n\r\nWorks exactly the same as in Select statement. Please refer to its documentation.\r\n\r\n\r\n## Delete\r\n\r\nBuilds a `DELETE` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar delete = sql.delete();\r\n// same as\r\nvar delete = new sql.cls.Delete();\r\n```\r\n\r\n### .from\r\n\r\nDefines the `FROM` clause.\r\n\r\n```js\r\ndelete.from("table");\r\n// produces DELETE FROM table\r\n```\r\n\r\n### .where\r\n\r\nWorks exactly the same as in Select statement. Please refer to its documentation.\r\n\r\n```js\r\ndelete.from("table").where({ one: 1 });\r\n// produces DELETE FROM table WHERE one = ?\r\n```\r\n\r\n### Joins\r\n\r\nWorks exactly the same as in Select statement. Please refer to its documentation.\r\n\r\n## Create\r\n\r\nBuilds a `CREATE` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar create = sql.create();\r\n// same as\r\nvar create = new sql.cls.Create();\r\n```\r\n\r\n### .table\r\n\r\nUse the statement to create a table.\r\n\r\n```js\r\ncreate.table("tablename").fields({ id: "INTEGER PRIMARY KEY", one: "TEXT", two: "REAL" });\r\n// same as\r\ncreate.table("tablename").fields("id INTEGER PRIMARY KEY","one TEXT","two REAL");\r\n// same as\r\ncreate.table("tablename").fields("id INTEGER PRIMARY KEY").fields("one TEXT","two REAL");\r\n// produces CREATE TABLE tablename (id INTEGER PRIMARY KEY, one TEXT, two REAL)\r\n```\r\n\r\n### .index\r\n\r\nUse the statement to create an index.\r\n\r\n```js\r\ncreate.index("indexname").on("tablename").fields("one", "two");\r\n// same as\r\ncreate.index("indexname").on("tablename").fields(["one", "two"]);\r\n// same as\r\ncreate.index("indexname").on("tablename").fields("one").fields(["two"]);\r\n// produces CREATE INDEX indexname ON tablename (one, two)\r\n```\r\n\r\n### .view\r\n\r\nUse the statement to create a view.\r\n\r\n```js\r\ncreate.view("viewname").as("SELECT * from table WHERE one = 1")\r\n// produces CREATE VIEW viewname AS SELECT * from table WHERE one = 1\r\n```\r\n\r\nIt accepts a `sql.cls.Select` instance. In this case the select query is built by `.toText` method so it will need proper quoting.\r\n\r\n```js\r\nvar select = sql.select().from("table").where({ one: 1, two: "\'value\'" });\r\n\r\ncreate.view("viewname").as(select);\r\n// produces CREATE VIEW viewname AS SELECT * from table WHERE (one = 1 AND two = \'value\')\r\n```\r\n\r\n### .trigger\r\n\r\nUse the statement to create a trigger.\r\n\r\n```js\r\ncreate.trigger("trgname").delete("tbl").do("INSERT INTO del (id) VALUES (old.id)");\r\n// produces CREATE TRIGGER trgname DELETE ON tbl BEGIN INSERT INTO del (id) VALUES (old.id); END;\r\n```\r\n\r\nIt covers `UPDATE` and `INSERT` triggers too. \r\n\r\n```js\r\ncreate.trigger("trgname").update("tbl.field");\r\n// produces CREATE TRIGGER trgname UPDATE OF field ON tbl\r\n```\r\n\r\n```js\r\ncreate.trigger("trgname").update("tbl");\r\n// produces CREATE TRIGGER trgname UPDATE ON tbl\r\n```\r\n\r\n```js\r\ncreate.trigger("trgname").insert("tbl");\r\n// produces CREATE TRIGGER trgname INSERT ON tbl\r\n```\r\n\r\nAnother way of defining the trigger. Works for all kinds of triggers.\r\n\r\n```js\r\ncreate.trigger("trgname").update().of("field").on("table");\r\n// produces CREATE TRIGGER trgname UPDATE OF field ON tbl\r\n```\r\n\r\n\r\nIt accepts a `sql.cls.Query` instance at `.do` method. In this case the statement is built by `.toText` method so it will need proper quoting.\r\n\r\n```js\r\nvar insert = sql.insert().into("del").fields("id").values("old.id");\r\n\r\ncreate.trigger("trgname").delete("tbl").do(insert);\r\n// produces CREATE TRIGGER trgname DELETE ON tbl BEGIN INSERT INTO del (id) VALUES (old.id); END;\r\n```\r\n\r\nYou can call `.do` as many times as needed. Don\'t mind the `;`, it will be included if it\'s not already. \r\n\r\n```js\r\nvar insert = sql.insert().into("del").fields("id").values("old.id");\r\n\r\ncreate.trigger("trgname").delete("tbl").do(insert).do(insert,insert);\r\n// produces a big query which is covered by unit tests\r\n```\r\n\r\n\r\n### .exists\r\n\r\nIncludes the `IF EXISTS` or `IF NOT EXISTS` clause. It applies to all kinds of `CREATE` statements.\r\n\r\n```js\r\ncreate.table("tablename").exists(false);\r\n// produces CREATE TABLE IF NOT EXISTS tablename\r\n```\r\n\r\nThe following obviously doesn\'t make sense. It\'s just to keep consistency with the `DROP` statement.\r\n\r\n```js\r\ncreate.table("tablename").exists(true);\r\n// produces CREATE TABLE IF EXISTS tablename\r\n```\r\n\r\n### .temp\r\n\r\nIncludes the `TEMPORARY` clause. It applies to tables and views. However the clause will be included in any kind of `CREATE` statement, so you should know when to use it.\r\n\r\n```js\r\ncreate.temp().table("temptable").fields("a TEXT");\r\n// produces CREATE TEMPORARY TABLE temptable (a TEXT)\r\n```\r\n\r\n```js\r\ncreate.temp().view("viewname").as("SELECT * FROM table WHERE one = 1");\r\n// produces CREATE TEMPORARY VIEW viewname AS SELECT * from table WHERE (one = 1)\r\n```\r\n\r\n### .unique\r\n\r\nIncludes the `UNIQUE` clause. It applies only to indexes. However the clause will be included in any kind of `CREATE` statement, so you should know when to use it.\r\n\r\n```js\r\ncreate.unique().index("indexname").on("tablename");\r\n// produces CREATE UNIQUE INDEX indexname ON tablename\r\n```\r\n\r\n\r\n## Alter\r\n\r\nBuilds an `ALTER` statement.\r\n\r\n### Constructor\r\n\r\n```js\r\nvar alter = sql.alter();\r\n// same as\r\nvar alter = new sql.cls.Alter();\r\n```\r\n\r\n### .table\r\n\r\nDefines the table to be altered.\r\n\r\n```js\r\nalter.table("tablename");\r\n// produces ALTER TABLE tablename\r\n```\r\n\r\n### .rename\r\n\r\nIncludes the `RENAME TO` clause.\r\n\r\n```js\r\nalter.table("tablename").renamte("newname");\r\n// produces ALTER TABLE tablename RENAME TO newname\r\n```\r\n\r\n### .add\r\n\r\nIncludes the `ADD COLUMN` clause.\r\n\r\n```js\r\nalter.table("tablename").add({ newfield: "TEXT" });\r\n// produces ALTER TABLE tablename ADD COLUMN newfield TEXT\r\n```\r\n\r\nIt can be used to add as many columns as needed. However this is not supported by `sqlite3`.\r\n\r\n```js\r\nalter.table("tablename").add({ one: "TEXT", two: "INTEGER" }).add("three REAL");\r\n// produces ALTER TABLE tablename ADD COLUMN one TEXT, ADD COLUMN two INTEGER, ADD COLUMN three REAL\r\n```\r\n\r\n### .drop\r\n\r\nIncludes the `DROP COLUMN` clause. However this is not supported by `sqlite3`.\r\n\r\n```js\r\nalter.table("tablename").drop("oldfield");\r\n// produces ALTER TABLE tablename DROP COLUMN oldfield\r\n```\r\n\r\nIt can be used to add as drop columns as needed.\r\n\r\n```js\r\nalter.table("tablename").drop("one","two").drop("three");\r\n// produces ALTER TABLE tablename DROP COLUMN one, DROP COLUMN two, DROP COLUMN three\r\n```\r\n\r\n## Drop\r\n\r\nBuilds a `DROP` statement. \r\n\r\n### Constructor\r\n\r\n```js\r\nvar drop = sql.drop();\r\n// same as\r\nvar drop = new sql.cls.Drop();\r\n```\r\n\r\n### .table\r\n\r\nUse the statement to drop a table.\r\n\r\n```js\r\ndrop.table("tablename")\r\n// produces DROP TABLE tablename\r\n```\r\n\r\n### .index\r\n\r\nUse the statement to drop an index.\r\n\r\n```js\r\ndrop.index("indexname")\r\n// produces DROP INDEX indexname\r\n```\r\n\r\n### .view\r\n\r\nUse the statement to drop a view.\r\n\r\n```js\r\ndrop.view("viewname")\r\n// produces DROP VIEW viewname\r\n```\r\n\r\n### .trigger\r\n\r\nUse the statement to drop a trigger.\r\n\r\n```js\r\ndrop.trigger("triggername")\r\n// produces DROP TRIGGER triggername\r\n```\r\n\r\n### .exists\r\n\r\nIncludes the `IF EXISTS` or `IF NOT EXISTS` clause. It applies to all kinds of `DROP` statements.\r\n\r\n```js\r\ndrop.table("tablename").exists(true);\r\n// produces DROP TABLE IF EXISTS tablename\r\n```\r\n\r\nThe following obviously doesn\'t make sense. It\'s just to keep consistency with the `CREATE` statement.\r\n\r\n```js\r\ndrop.table("tablename").exists(false);\r\n// produces DROP TABLE IF NOT EXISTS tablename\r\n```\r\n\r\n## License\r\n\r\nMIT',
118 silly publish   readmeFilename: 'README.md',
118 silly publish   bugs: { url: 'https://github.com/yneves/node-bauer-sql/issues' },
118 silly publish   _id: 'bauer-sql@1.0.0',
118 silly publish   dist: { shasum: '2c08591167b841fd2b709057d776af87e86d2241' },
118 silly publish   _from: '.' }
119 verbose url raw bauer-sql
120 verbose url resolving [ 'https://registry.npmjs.org/', './bauer-sql' ]
121 verbose url resolved https://registry.npmjs.org/bauer-sql
122 info trying registry request attempt 1 at 02:29:47
123 http PUT https://registry.npmjs.org/bauer-sql
124 http 403 https://registry.npmjs.org/bauer-sql
125 error publish Failed PUT 403
126 error Error: forbidden cannot modify pre-existing version: 1.0.0
126 error old={"name":"bauer-sql","version":"1.0.0","description":"Just another SQL building tool","keywords":["sql","query","insert","delete","update","create","alter","drop","table","index","trigger","statement"],"license":"MIT","homepage":"https://github.com/yneves/node-bauer-sql","author":{"name":"Yuri Neves Silveira","email":"npm@yneves.com","url":"http://yneves.com/"},"repository":{"type":"git","url":"https://github.com/yneves/node-bauer-sql.git"},"scripts":{"test":"mocha"},"devDependencies":{"mocha":">=1.0.0"},"dependencies":{"bauer-factory":">=1.0.0"},"main":"sql.js","bugs":{"url":"https://github.com/yneves/node-bauer-sql/issues"},"_id":"bauer-sql@1.0.0","dist":{"shasum":"e2f93237f6a4d8be4dc2b8668c53067072b9f7be","tarball":"http://registry.npmjs.org/bauer-sql/-/bauer-sql-1.0.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"yneves","email":"npm@yneves.com"},"maintainers":[{"name":"yneves","email":"npm@yneves.com"}]}
126 error new={"name":"bauer-sql","version":"1.0.0","description":"Just another SQL building tool","keywords":["sql","query","insert","delete","update","create","alter","drop","table","index","trigger","statement"],"license":"MIT","homepage":"https://github.com/yneves/node-bauer-sql","author":{"name":"Yuri Neves Silveira","email":"npm@yneves.com","url":"http://yneves.com/"},"repository":{"type":"git","url":"https://github.com/yneves/node-bauer-sql.git"},"scripts":{"test":"mocha"},"devDependencies":{"mocha":">=1.0.0"},"dependencies":{"bauer-factory":">=1.0.0"},"main":"sql.js","readme":"node-bauer-sql\u000d\u000a==============\u000d\u000a\u000d\u000aJust another SQL building tool. \u000d\u000a\u000d\u000aIt was inspired by [Squel.js](http://hiddentao.github.io/squel/index.html), which i used for some time and is a great library.\u000d\u000a\u000d\u000a## Installation\u000d\u000a\u000d\u000a```\u000d\u000anpm install bauer-sql\u000d\u000a```\u000d\u000a\u000d\u000a## Usage\u000d\u000a\u000d\u000aThe module provides the most common statements (SELECT, INSERT, DELETE, UPDATE, CREATE, ALTER, DROP). It was built to be used with `sqlite3` and works perfectly on it. Although it should work with other SQL dialects, since it covers common syntax. Unit tests covers only query building, not it's execution.\u000d\u000a\u000d\u000a```js\u000d\u000avar sql = require(\"bauer-sql\");\u000d\u000a```\u000d\u000a\u000d\u000a## Query\u000d\u000a\u000d\u000aThe `sql.cls.Query` class is inherited by all other classes. Extending its prototype will make it available for all other kinds of statements.\u000d\u000a\u000d\u000a```js\u000d\u000asql.cls.Query.prototype.execute = function() {\u000d\u000a\u0009var query = this.toQuery();\u000d\u000a\u0009sqlite3.run(query.text,query.args,function() {\u000d\u000a\u0009});\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a### .toQuery\u000d\u000a\u000d\u000aBuilds the query and returns an object with `text` and `args` properties, so you can give it to your favorite executing library.\u000d\u000a\u000d\u000a```js\u000d\u000avar query = queryObj.toQuery();\u000d\u000avar text = query.text; // String\u000d\u000avar args = query.args; // Array\u000d\u000a```\u000d\u000a\u000d\u000a### .toText\u000d\u000a\u000d\u000aBuilds the query by calling `.toQuery` and then replaces all `?` tokens with corresponding arguments. \u000d\u000a\u000d\u000a```js\u000d\u000avar text = queryObj.toText();\u000d\u000a```\u000d\u000a\u000d\u000aIt accepts a callback which can be used to quote values. Values aren't quoted by default.\u000d\u000a\u000d\u000a```js\u000d\u000avar text = queryObj.toText(function(val,idx) {\u000d\u000a\u0009return \"'\" + val + \"'\";\u000d\u000a});\u000d\u000a```\u000d\u000a\u000d\u000a## Select\u000d\u000a\u000d\u000aBuilds a `SELECT` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar select = sql.select();\u000d\u000a// same as\u000d\u000avar select = new sql.cls.Select();\u000d\u000a```\u000d\u000a\u000d\u000a### .fields\u000d\u000a\u000d\u000aSet the fields to be selected. Defaults to `*`.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.fields(\"table.*, other.fieldname AS name\")\u000d\u000a// same as\u000d\u000aselect.fields(\"table.*\",\"other.fieldname AS name\")\u000d\u000a// same as\u000d\u000aselect.fields(\"table.*\").fields({ \"other.fieldname\": \"name\" });\u000d\u000a// produces SELECT table.*, other.fieldname AS name\u000d\u000a```\u000d\u000a\u000d\u000a### .from\u000d\u000a\u000d\u000aDefines the `FROM` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.from(\"table, other\");\u000d\u000a// same as\u000d\u000aselect.from(\"table\",\"other\");\u000d\u000a// same as\u000d\u000aselect.from(\"table\").from(\"other\");\u000d\u000a// produces FROM table, other\u000d\u000a```\u000d\u000a\u000d\u000aIt accepts a `sql.cls.Select` instance.\u000d\u000a\u000d\u000a```js\u000d\u000avar from = sql.select().fields(\"table.*\").from(\"table\").where({ field: \"value\" });\u000d\u000a\u000d\u000aselect.from( from ).where({ other: \"value\" }); \u000d\u000a// produces SELECT * FROM (SELECT other.* FROM table WHERE field = ?) WHERE other = ?\u000d\u000a```\u000d\u000a\u000d\u000a### .where\u000d\u000a\u000d\u000aDefines the `WHERE` clause.  \u000d\u000a\u000d\u000a```js\u000d\u000aselect.where({ one: 1, two: 2 })\u000d\u000a// produces WHERE (one = ? AND two = ?)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.where({ one: 1 }).where({ two: 2 })\u000d\u000a// produces WHERE (one = ?) AND (two = ?)\u000d\u000a```\u000d\u000a\u000d\u000aA little more complex filtering.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.where({ one: { gt: 0, elt: 1 }, two: [2,3,4] })\u000d\u000a// produces WHERE (one > ? AND one <= ? AND two IN (?, ?, ?))\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.where({ one: { gt: 0, elt: 1 } }).where({ two: [2,3,4] })\u000d\u000a// produces WHERE (one > ? AND one <= ?) AND (two IN (?, ?, ?))\u000d\u000a```\u000d\u000a\u000d\u000aAll entries are combined with `AND` operator. To use `OR` call it passing a `String`. In this case the query arguments won't be handled.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.where(\"one = 1 OR one = 2\",\"two = 3 OR two = 4\");\u000d\u000a// same as\u000d\u000aselect.where(\"one = 1 OR one = 2\").where(\"two = 3 OR two = 4\");\u000d\u000a// produces WHERE (one = 1 OR one = 2) AND (two = 3 OR two = 4)\u000d\u000a```\u000d\u000a\u000d\u000a### .group\u000d\u000a\u000d\u000aDefines the `GROUP BY` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.group(\"one, two\")\u000d\u000a// same as\u000d\u000aselect.group(\"one\",\"two\")\u000d\u000a// same as\u000d\u000aselect.group(\"one\").group(\"two\")\u000d\u000a// produces GROUP BY one, two\u000d\u000a```\u000d\u000a\u000d\u000a### .order\u000d\u000a\u000d\u000aDefines the `ORDER BY` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.order(\"one, two DESC\")\u000d\u000a// same as\u000d\u000aselect.order(\"one\",\"two DESC\")\u000d\u000a// same as\u000d\u000aselect.group(\"one\").group(\"two DESC\")\u000d\u000a// produces ORDER BY one, two DESC\u000d\u000a```\u000d\u000a\u000d\u000a### .limit\u000d\u000a\u000d\u000aDefines the `LIMIT` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.limit(\"10, 20\")\u000d\u000a// same as\u000d\u000aselect.limit(10,20)\u000d\u000a// same as\u000d\u000aselect.limit(10).limit(20)\u000d\u000a// produces LIMIT 10, 20\u000d\u000a```\u000d\u000a\u000d\u000a### Joins\u000d\u000a\u000d\u000aIncludes join operations at the `FROM` clause. Currently `JOIN`, `INNER JOIN`, `LEFT JOIN`, `LEFT OUTER JOIN` and `CROSS JOIN` are available as they are the ones supported by `sqlite3`. It's simple to add or remove operators by modifying the `JOINS` array at the beginning of `sql.js` file.\u000d\u000a\u000d\u000a```js\u000d\u000aselect.join({ \"joinedtable\": \"joinedtable.id = fromtable.id\" })\u000d\u000a// produces JOIN joinedtable ON (joinedtable.id = fromtable.id)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.innertJoin({ \"joinedtable\": \"joinedtable.id = fromtable.id\" })\u000d\u000a// produces INNER JOIN joinedtable ON (joinedtable.id = fromtable.id)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.leftJoin({ \"joinedtable\": \"joinedtable.id = fromtable.id\" })\u000d\u000a// produces LEFT JOIN joinedtable ON (joinedtable.id = fromtable.id)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.leftOuterJoin({ \"joinedtable\": \"joinedtable.id = fromtable.id\" })\u000d\u000a// produces LEFT OUTER JOIN joinedtable ON (joinedtable.id = fromtable.id)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000aselect.crossJoin({ \"joinedtable\": \"joinedtable.id = fromtable.id\" })\u000d\u000a// produces CROSS JOIN joinedtable ON (joinedtable.id = fromtable.id)\u000d\u000a```\u000d\u000a\u000d\u000aOperations can be combined having each entry representing a join operation.\u000d\u000a\u000d\u000a```js\u000d\u000aselect\u000d\u000a  .fields({ \"a.id\": \"a\", \"b.id\": \"b\",\"c.id\": \"c\",\"d.id\": \"d\",\"e.id\": \"e\" })\u000d\u000a  .from(\"a\")\u000d\u000a  .join({ \"b\": \"b.id = a.bid\", \"c\": \"c.id = a.cid\" })\u000d\u000a  .leftJoin({ \"d\": \"d.id = a.did\" })\u000d\u000a  .leftOuterJoin({ \"e\": \"e.id = a.eid\" })\u000d\u000a// produces:\u000d\u000a// SELECT a.id as a, b.id as b, c.id as c, d.id as d, e.id as e\u000d\u000a// FROM a\u000d\u000a// JOIN b ON (b.id = a.bid)\u000d\u000a// JOIN c ON (c.id = a.cid)\u000d\u000a// LEFT JOIN d ON (d.id = a.did)\u000d\u000a// LEFT OUTER JOIN e ON (e.id = a.eid)\u000d\u000a```\u000d\u000a\u000d\u000a## Insert\u000d\u000a\u000d\u000aBuilds an `INSERT` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar insert = sql.insert();\u000d\u000a// same as\u000d\u000avar insert = new sql.cls.Insert();\u000d\u000a```\u000d\u000a\u000d\u000a### .into\u000d\u000a\u000d\u000aDefines the `INTO` clause.\u000d\u000a\u000d\u000a```js\u000d\u000ainsert.into(\"table\")\u000d\u000a// produces INSERT INTO table\u000d\u000a```\u000d\u000a\u000d\u000a### .fields\u000d\u000a\u000d\u000aDefines the columns names in the given order.\u000d\u000a\u000d\u000a```js\u000d\u000ainsert.into(\"table\").fields(\"one, two, three\")\u000d\u000a// same as\u000d\u000ainsert.into(\"table\").fields(\"one\",\"two\",\"three\")\u000d\u000a// same as\u000d\u000ainsert.into(\"table\").fields(\"one\").fields(\"two\").fields(\"three\")\u000d\u000a// same as\u000d\u000ainsert.into(\"table\").fields([\"one\",\"two\",\"three\"])\u000d\u000a// produces INSERT INTO table (one, two, three)\u000d\u000a```\u000d\u000a\u000d\u000a### .values\u000d\u000a\u000d\u000aDefines the records values. Unlike other methods, each call of `.values` defines a diferent record.\u000d\u000a\u000d\u000a```js\u000d\u000ainsert.values(1,2,3)\u000d\u000a// same as\u000d\u000ainsert.values([1,2,3])\u000d\u000a//same as\u000d\u000ainsert.values(1,[2,3])\u000d\u000a// produces VALUES (?, ?, ?)\u000d\u000a```\u000d\u000a\u000d\u000aTo insert multiple records call `.values` as many times as needed.\u000d\u000a\u000d\u000a```js\u000d\u000ainsert.values(1,2,3).values(1,2,3).values(1,2,3)\u000d\u000a// produces VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?)\u000d\u000a```\u000d\u000a\u000d\u000a## Update\u000d\u000a\u000d\u000aBuilds an `UPDATE` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar update = sql.update();\u000d\u000a// same as\u000d\u000avar update = new sql.cls.Update();\u000d\u000a```\u000d\u000a\u000d\u000a### .table\u000d\u000a\u000d\u000aDefines the table to be updated.\u000d\u000a\u000d\u000a```js\u000d\u000aupdate.table(\"table\")\u000d\u000a// produces UPDATE table\u000d\u000a```\u000d\u000a\u000d\u000a### .set\u000d\u000a\u000d\u000aDefines the `SET` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aupdate.set({ one: 1, two: 2 })\u000d\u000a// same as\u000d\u000aupdate.set({ one: 1 },{ two: 2 })\u000d\u000a// same as\u000d\u000aupdate.set({ one: 1 }).set({ two: 2 })\u000d\u000a// produces SET one = ?, two = ?\u000d\u000a```\u000d\u000a\u000d\u000a### .where\u000d\u000a\u000d\u000aWorks exactly the same as in Select statement. Please refer to its documentation.\u000d\u000a\u000d\u000a### Joins\u000d\u000a\u000d\u000aWorks exactly the same as in Select statement. Please refer to its documentation.\u000d\u000a\u000d\u000a\u000d\u000a## Delete\u000d\u000a\u000d\u000aBuilds a `DELETE` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar delete = sql.delete();\u000d\u000a// same as\u000d\u000avar delete = new sql.cls.Delete();\u000d\u000a```\u000d\u000a\u000d\u000a### .from\u000d\u000a\u000d\u000aDefines the `FROM` clause.\u000d\u000a\u000d\u000a```js\u000d\u000adelete.from(\"table\");\u000d\u000a// produces DELETE FROM table\u000d\u000a```\u000d\u000a\u000d\u000a### .where\u000d\u000a\u000d\u000aWorks exactly the same as in Select statement. Please refer to its documentation.\u000d\u000a\u000d\u000a```js\u000d\u000adelete.from(\"table\").where({ one: 1 });\u000d\u000a// produces DELETE FROM table WHERE one = ?\u000d\u000a```\u000d\u000a\u000d\u000a### Joins\u000d\u000a\u000d\u000aWorks exactly the same as in Select statement. Please refer to its documentation.\u000d\u000a\u000d\u000a## Create\u000d\u000a\u000d\u000aBuilds a `CREATE` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar create = sql.create();\u000d\u000a// same as\u000d\u000avar create = new sql.cls.Create();\u000d\u000a```\u000d\u000a\u000d\u000a### .table\u000d\u000a\u000d\u000aUse the statement to create a table.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.table(\"tablename\").fields({ id: \"INTEGER PRIMARY KEY\", one: \"TEXT\", two: \"REAL\" });\u000d\u000a// same as\u000d\u000acreate.table(\"tablename\").fields(\"id INTEGER PRIMARY KEY\",\"one TEXT\",\"two REAL\");\u000d\u000a// same as\u000d\u000acreate.table(\"tablename\").fields(\"id INTEGER PRIMARY KEY\").fields(\"one TEXT\",\"two REAL\");\u000d\u000a// produces CREATE TABLE tablename (id INTEGER PRIMARY KEY, one TEXT, two REAL)\u000d\u000a```\u000d\u000a\u000d\u000a### .index\u000d\u000a\u000d\u000aUse the statement to create an index.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.index(\"indexname\").on(\"tablename\").fields(\"one\", \"two\");\u000d\u000a// same as\u000d\u000acreate.index(\"indexname\").on(\"tablename\").fields([\"one\", \"two\"]);\u000d\u000a// same as\u000d\u000acreate.index(\"indexname\").on(\"tablename\").fields(\"one\").fields([\"two\"]);\u000d\u000a// produces CREATE INDEX indexname ON tablename (one, two)\u000d\u000a```\u000d\u000a\u000d\u000a### .view\u000d\u000a\u000d\u000aUse the statement to create a view.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.view(\"viewname\").as(\"SELECT * from table WHERE one = 1\")\u000d\u000a// produces CREATE VIEW viewname AS SELECT * from table WHERE one = 1\u000d\u000a```\u000d\u000a\u000d\u000aIt accepts a `sql.cls.Select` instance. In this case the select query is built by `.toText` method so it will need proper quoting.\u000d\u000a\u000d\u000a```js\u000d\u000avar select = sql.select().from(\"table\").where({ one: 1, two: \"'value'\" });\u000d\u000a\u000d\u000acreate.view(\"viewname\").as(select);\u000d\u000a// produces CREATE VIEW viewname AS SELECT * from table WHERE (one = 1 AND two = 'value')\u000d\u000a```\u000d\u000a\u000d\u000a### .trigger\u000d\u000a\u000d\u000aUse the statement to create a trigger.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.trigger(\"trgname\").delete(\"tbl\").do(\"INSERT INTO del (id) VALUES (old.id)\");\u000d\u000a// produces CREATE TRIGGER trgname DELETE ON tbl BEGIN INSERT INTO del (id) VALUES (old.id); END;\u000d\u000a```\u000d\u000a\u000d\u000aIt covers `UPDATE` and `INSERT` triggers too. \u000d\u000a\u000d\u000a```js\u000d\u000acreate.trigger(\"trgname\").update(\"tbl.field\");\u000d\u000a// produces CREATE TRIGGER trgname UPDATE OF field ON tbl\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000acreate.trigger(\"trgname\").update(\"tbl\");\u000d\u000a// produces CREATE TRIGGER trgname UPDATE ON tbl\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000acreate.trigger(\"trgname\").insert(\"tbl\");\u000d\u000a// produces CREATE TRIGGER trgname INSERT ON tbl\u000d\u000a```\u000d\u000a\u000d\u000aAnother way of defining the trigger. Works for all kinds of triggers.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.trigger(\"trgname\").update().of(\"field\").on(\"table\");\u000d\u000a// produces CREATE TRIGGER trgname UPDATE OF field ON tbl\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000aIt accepts a `sql.cls.Query` instance at `.do` method. In this case the statement is built by `.toText` method so it will need proper quoting.\u000d\u000a\u000d\u000a```js\u000d\u000avar insert = sql.insert().into(\"del\").fields(\"id\").values(\"old.id\");\u000d\u000a\u000d\u000acreate.trigger(\"trgname\").delete(\"tbl\").do(insert);\u000d\u000a// produces CREATE TRIGGER trgname DELETE ON tbl BEGIN INSERT INTO del (id) VALUES (old.id); END;\u000d\u000a```\u000d\u000a\u000d\u000aYou can call `.do` as many times as needed. Don't mind the `;`, it will be included if it's not already. \u000d\u000a\u000d\u000a```js\u000d\u000avar insert = sql.insert().into(\"del\").fields(\"id\").values(\"old.id\");\u000d\u000a\u000d\u000acreate.trigger(\"trgname\").delete(\"tbl\").do(insert).do(insert,insert);\u000d\u000a// produces a big query which is covered by unit tests\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000a### .exists\u000d\u000a\u000d\u000aIncludes the `IF EXISTS` or `IF NOT EXISTS` clause. It applies to all kinds of `CREATE` statements.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.table(\"tablename\").exists(false);\u000d\u000a// produces CREATE TABLE IF NOT EXISTS tablename\u000d\u000a```\u000d\u000a\u000d\u000aThe following obviously doesn't make sense. It's just to keep consistency with the `DROP` statement.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.table(\"tablename\").exists(true);\u000d\u000a// produces CREATE TABLE IF EXISTS tablename\u000d\u000a```\u000d\u000a\u000d\u000a### .temp\u000d\u000a\u000d\u000aIncludes the `TEMPORARY` clause. It applies to tables and views. However the clause will be included in any kind of `CREATE` statement, so you should know when to use it.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.temp().table(\"temptable\").fields(\"a TEXT\");\u000d\u000a// produces CREATE TEMPORARY TABLE temptable (a TEXT)\u000d\u000a```\u000d\u000a\u000d\u000a```js\u000d\u000acreate.temp().view(\"viewname\").as(\"SELECT * FROM table WHERE one = 1\");\u000d\u000a// produces CREATE TEMPORARY VIEW viewname AS SELECT * from table WHERE (one = 1)\u000d\u000a```\u000d\u000a\u000d\u000a### .unique\u000d\u000a\u000d\u000aIncludes the `UNIQUE` clause. It applies only to indexes. However the clause will be included in any kind of `CREATE` statement, so you should know when to use it.\u000d\u000a\u000d\u000a```js\u000d\u000acreate.unique().index(\"indexname\").on(\"tablename\");\u000d\u000a// produces CREATE UNIQUE INDEX indexname ON tablename\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000a## Alter\u000d\u000a\u000d\u000aBuilds an `ALTER` statement.\u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar alter = sql.alter();\u000d\u000a// same as\u000d\u000avar alter = new sql.cls.Alter();\u000d\u000a```\u000d\u000a\u000d\u000a### .table\u000d\u000a\u000d\u000aDefines the table to be altered.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\");\u000d\u000a// produces ALTER TABLE tablename\u000d\u000a```\u000d\u000a\u000d\u000a### .rename\u000d\u000a\u000d\u000aIncludes the `RENAME TO` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\").renamte(\"newname\");\u000d\u000a// produces ALTER TABLE tablename RENAME TO newname\u000d\u000a```\u000d\u000a\u000d\u000a### .add\u000d\u000a\u000d\u000aIncludes the `ADD COLUMN` clause.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\").add({ newfield: \"TEXT\" });\u000d\u000a// produces ALTER TABLE tablename ADD COLUMN newfield TEXT\u000d\u000a```\u000d\u000a\u000d\u000aIt can be used to add as many columns as needed. However this is not supported by `sqlite3`.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\").add({ one: \"TEXT\", two: \"INTEGER\" }).add(\"three REAL\");\u000d\u000a// produces ALTER TABLE tablename ADD COLUMN one TEXT, ADD COLUMN two INTEGER, ADD COLUMN three REAL\u000d\u000a```\u000d\u000a\u000d\u000a### .drop\u000d\u000a\u000d\u000aIncludes the `DROP COLUMN` clause. However this is not supported by `sqlite3`.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\").drop(\"oldfield\");\u000d\u000a// produces ALTER TABLE tablename DROP COLUMN oldfield\u000d\u000a```\u000d\u000a\u000d\u000aIt can be used to add as drop columns as needed.\u000d\u000a\u000d\u000a```js\u000d\u000aalter.table(\"tablename\").drop(\"one\",\"two\").drop(\"three\");\u000d\u000a// produces ALTER TABLE tablename DROP COLUMN one, DROP COLUMN two, DROP COLUMN three\u000d\u000a```\u000d\u000a\u000d\u000a## Drop\u000d\u000a\u000d\u000aBuilds a `DROP` statement. \u000d\u000a\u000d\u000a### Constructor\u000d\u000a\u000d\u000a```js\u000d\u000avar drop = sql.drop();\u000d\u000a// same as\u000d\u000avar drop = new sql.cls.Drop();\u000d\u000a```\u000d\u000a\u000d\u000a### .table\u000d\u000a\u000d\u000aUse the statement to drop a table.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.table(\"tablename\")\u000d\u000a// produces DROP TABLE tablename\u000d\u000a```\u000d\u000a\u000d\u000a### .index\u000d\u000a\u000d\u000aUse the statement to drop an index.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.index(\"indexname\")\u000d\u000a// produces DROP INDEX indexname\u000d\u000a```\u000d\u000a\u000d\u000a### .view\u000d\u000a\u000d\u000aUse the statement to drop a view.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.view(\"viewname\")\u000d\u000a// produces DROP VIEW viewname\u000d\u000a```\u000d\u000a\u000d\u000a### .trigger\u000d\u000a\u000d\u000aUse the statement to drop a trigger.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.trigger(\"triggername\")\u000d\u000a// produces DROP TRIGGER triggername\u000d\u000a```\u000d\u000a\u000d\u000a### .exists\u000d\u000a\u000d\u000aIncludes the `IF EXISTS` or `IF NOT EXISTS` clause. It applies to all kinds of `DROP` statements.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.table(\"tablename\").exists(true);\u000d\u000a// produces DROP TABLE IF EXISTS tablename\u000d\u000a```\u000d\u000a\u000d\u000aThe following obviously doesn't make sense. It's just to keep consistency with the `CREATE` statement.\u000d\u000a\u000d\u000a```js\u000d\u000adrop.table(\"tablename\").exists(false);\u000d\u000a// produces DROP TABLE IF NOT EXISTS tablename\u000d\u000a```\u000d\u000a\u000d\u000a## License\u000d\u000a\u000d\u000aMIT","readmeFilename":"README.md","bugs":{"url":"https://github.com/yneves/node-bauer-sql/issues"},"_id":"bauer-sql@1.0.0","dist":{"shasum":"2c08591167b841fd2b709057d776af87e86d2241","tarball":"http://registry.npmjs.org/bauer-sql/-/bauer-sql-1.0.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"yneves","email":"npm@yneves.com"},"maintainers":[{"name":"yneves","email":"npm@yneves.com"}]}: bauer-sql
126 error     at RegClient.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:237:14)
126 error     at Request.self.callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
126 error     at Request.EventEmitter.emit (events.js:98:17)
126 error     at Request.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
126 error     at Request.EventEmitter.emit (events.js:117:20)
126 error     at IncomingMessage.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
126 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
126 error     at _stream_readable.js:920:16
126 error     at process._tickCallback (node.js:415:13)
127 error If you need help, you may report this *entire* log,
127 error including the npm and node versions, at:
127 error     <http://github.com/npm/npm/issues>
128 error System Windows_NT 6.2.9200
129 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
130 error cwd D:\code\GitHub\node-bauer-sql
131 error node -v v0.10.26
132 error npm -v 1.4.3
133 verbose exit [ 1, true ]
